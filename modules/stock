"use strict";

const dsn = require("../config/database.js");
const mongo = require("mongodb").MongoClient;
const errors = require("./errors");
const auth = require("./auth.js");

const user = {
    getUser: async function(res, req) {
        const userName = req.body.userName;
        const email = req.body.email;
        const client = await mongo.connect(dsn, {
            useNewUrlParser: true,
            useUnifiedTopology: true
        });
        const db = await client.db();
        const users = await db.collection("users");

        if (!userName || !email) {
            return errors.error(res, 401, `${req.baseUrl}${req.path}`, "Unauthorized, need to login first");
        }
        users.findOne(
            {email: email, userName: userName},
            async function(err, user) {
                await client.close();
                if (err) {
                    return errors.error(res, 500, "/login", "Database error", err.message);
                }
                if (user === null) {
                    return errors.error(res, 401, `${req.baseUrl}${req.path}`, "Unauthorized");
                }

                return res.status(201).json({
                    email: user.email,
                    userName: user.userName,
                    currency: user.currency || 0,
                    history: user.history || false
                });
            });
    },

    insert: async function(res, req) {
        const rate = req.body.rate.replace(",", ".");
        const variance = req.body.variance.replace(",", ".");
        const startingPoint = req.body.startingPoint.replace(",", ".");
        const description = req.body.description;
        const name = req.body.name;
        // const operator = req.body.operator
        const client = await mongo.connect(dsn, {
            useNewUrlParser: true,
            useUnifiedTopology: true
        });
        const db = await client.db();
        const users = await db.collection("users");

        if (!parseFloat(rate) || !parseFloat(variance) || parseFloat(startingPoint)) {
            return errors.error(res, 400, `${req.baseUrl}${req.path}`, "Amount needs to be an int or float");
        }
        amount = parseFloat(amount);

        if (!userName || !email) {
            return errors.error(res, 401, `${req.baseUrl}${req.path}`, "Unauthorized, need to login first");
        }

        // if(!operator || operator !== "+" && operator !== "-") {
        //     return errors.error(res, 401, `${req.baseUrl}${req.path}`, "You need to add operator param");
        // }
        users.findOne(
            {email: email, userName: userName},
            async function(err, user) {
                if (err) {
                    await client.close();
                    return errors.error(res, 500, "/login", "Database error", err.message);
                }
                if (user === null) {
                    await client.close();
                    return errors.error(res, 401, `${req.baseUrl}${req.path}`, "Unauthorized");
                }
                let currency = user.currency || 0;
                let newCurrency = currency + amount;

                console.log(newCurrency);
                await users.updateOne({email: email, userName: userName}, { $set:
                    {currency: newCurrency}
                }, async function(err, res) {
                    await client.close();
                    if (err) {
                        return errors.error(res, 500, "/login", "Database error", err.message);
                    }
                    console.log("sad");
                    return res.status(204).json();
                }
                );
            }
        );
    },
};

module.exports = user;
